import os
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler
# Correcto para versiones modernas de python-telegram-bot
from telegram.ext import filters
import requests

# --- CONFIGURACI√ìN ---
# Leer el token de Telegram desde las variables de entorno
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError(
        "TELEGRAM_BOT_TOKEN no est√° configurada como variable de entorno.")

# URL de tu endpoint de API para consulta electoral (votaci√≥n)
API_VOTACION_URL = os.environ.get('API_VOTACION_URL')
if not API_VOTACION_URL:
    raise ValueError(
        "API_VOTACION_URL no est√° configurada como variable de entorno.")

# La API_CENSADO_URL y su manejo se eliminan por ahora, seg√∫n tu indicaci√≥n.
# Se considerar√° para una futura versi√≥n.


# --- FUNCIONES DEL BOT ---

def start(update, context):
    """Maneja el comando /start."""
    update.message.reply_text(
        '¬°Hola! Soy Progreso, tu bot de consulta de c√©dulas.\n\n'
        'Actualmente, solo puedo consultar el centro de votaci√≥n.\n'
        '‚û°Ô∏è `/consulta [n√∫mero de c√©dula]`: Consulta tu centro de votaci√≥n.\n\n'
        '**Ejemplo:** `/consulta V12345678`',
        # Asegura que el formato Markdown se aplique
        parse_mode=telegram.ParseMode.MARKDOWN
    )


def consultar_elector(update, context):
    """Maneja el comando /consulta para obtener datos electorales."""
    args = context.args
    if not args:
        update.message.reply_text(
            'Por favor, ingresa el n√∫mero de c√©dula despu√©s del comando. Ejemplo: `/consulta V12345678`',
            parse_mode=telegram.ParseMode.MARKDOWN
        )
        return

    # Obtener la c√©dula, limpiar espacios, y convertir a may√∫sculas
    cedula_input = args[0].strip().upper()

    # Validaci√≥n de c√©dula venezolana (V, E, P + n√∫meros)
    # Asumimos que la API puede manejar el prefijo (V, E, P) como parte de la c√©dula string
    if not (len(cedula_input) > 1 and cedula_input[0] in ('V', 'E', 'P') and cedula_input[1:].isdigit()):
        update.message.reply_text(
            'Formato de c√©dula incorrecto. Debe empezar con V, E o P seguido de n√∫meros. Ejemplo: V12345678')
        return

    update.message.reply_text(
        f'Consultando tu API para la c√©dula {cedula_input}...')

    try:
        # Prepara los par√°metros para la petici√≥n GET. Se env√≠a la c√©dula como string.
        params = {'cedula': cedula_input}

        # Realiza la petici√≥n a tu API de votaci√≥n
        response = requests.get(API_VOTACION_URL, params=params)
        # Lanza una excepci√≥n para c√≥digos de error HTTP (4xx o 5xx)
        response.raise_for_status()

        data = response.json()  # Asume que tu API devuelve JSON

        mensaje_respuesta = ""
        # Verifica si tu API devolvi√≥ datos v√°lidos para la c√©dula
        # Asumo que la presencia de 'cedula' en la respuesta JSON indica √©xito.
        # Ajusta 'data.get('cedula')' a la clave que tu API usa para indicar que encontr√≥ el registro.
        if data and data.get('cedula'):
            # --- PERSONALIZA AQU√ç LA EXTRACCI√ìN DE CAMPOS SEG√öN LA RESPUESTA DE TU API ---
            # ¬°IMPORTANTE! Reemplaza 'pnombre', 'snombre', etc. con los nombres EXACTOS de las claves JSON de tu API.
            nacionalidad = data.get('nacionalidad', 'N/A')
            # Revisa: ¬øtu API devuelve 'pnombre' o 'primerNombre'?
            primer_nombre = data.get('pnombre', 'N/A')
            # Revisa: ¬øtu API devuelve 'snombre' o 'segundoNombre'?
            segundo_nombre = data.get('snombre', 'N/A')
            # Revisa: ¬øtu API devuelve 'papellido' o 'primerApellido'?
            primer_apellido = data.get('papellido', 'N/A')
            # Revisa: ¬øtu API devuelve 'sapellido' o 'segundoApellido'?
            segundo_apellido = data.get('sapellido', 'N/A')
            # Revisa: ¬øtu API devuelve 'cv' o 'centro_votacion'?
            centro_votacion = data.get('cv', 'No especificado')
            # A√±ade otros campos si tu API los devuelve, por ejemplo:
            # direccion_centro = data.get('direccion_centro', 'N/A')
            # mesa_votacion = data.get('mesa', 'N/A')

            # Construir el nombre completo para la presentaci√≥n
            nombre_completo = f"{primer_nombre} {segundo_nombre}".strip()
            apellido_completo = f"{primer_apellido} {segundo_apellido}".strip()

            mensaje_respuesta = (
                f"‚úÖ **Datos del Elector:**\n"
                f"   üë§ **C√©dula:** {nacionalidad}{data.get('cedula', 'N/A')}\n"
                f"   **Nombre:** {nombre_completo if nombre_completo else 'N/A'}\n"
                f"   **Apellido:** {apellido_completo if apellido_completo else 'N/A'}\n"
                f"   üó≥Ô∏è **Centro de Votaci√≥n:** {centro_votacion}\n"
                # f"   üìç **Direcci√≥n:** {direccion_centro}\n" # Descomentar si usas
                # f"   ü™ë **Mesa:** {mesa_votacion}" # Descomentar si usas
            )
        else:
            # Mensaje si no se encuentran datos para la c√©dula
            mensaje_respuesta = (
                f"‚ùå No se encontr√≥ informaci√≥n electoral para la c√©dula {cedula_input}. "
                f"Por favor, verifica el n√∫mero."
            )

        update.message.reply_text(
            mensaje_respuesta, parse_mode=telegram.ParseMode.MARKDOWN)

    except requests.exceptions.RequestException as e:
        # Manejo de errores de red o HTTP (ej. API no disponible, 404, 500)
        update.message.reply_text(
            f'‚ùå Error al conectar con tu API: {e}. Por favor, verifica la URL de la API o int√©ntalo m√°s tarde.')
    except ValueError:
        # Manejo de errores si la respuesta de la API no es un JSON v√°lido
        update.message.reply_text(
            '‚ùå Error al procesar la respuesta de tu API. El formato de la respuesta no es v√°lido.')
    except Exception as e:
        # Otros errores inesperados
        update.message.reply_text(f'‚ùå Ocurri√≥ un error inesperado: {e}.')


def main():
    """Funci√≥n principal para iniciar el bot."""
    updater = Updater(TOKEN)  # CORREGIDO: Eliminado use_context=True
    dp = updater.dispatcher

    # A√±adir manejadores de comandos
    dp.add_handler(CommandHandler("start", start))
    # El comando /censo y su handler se eliminan por ahora.
    dp.add_handler(CommandHandler("consulta", consultar_elector))

    # Iniciar el bot
    updater.start_polling()
    updater.idle()  # Mantener el bot en ejecuci√≥n hasta que se presione Ctrl+C


if __name__ == '__main__':
    main()
